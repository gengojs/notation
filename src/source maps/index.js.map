{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAI,SAAS,GAAG;AACd,SAAO,EAAE,+BAA+B;AACxC,KAAG,EAAE,QAAQ;AACb,QAAM,EAAE,IAAI;CACb,CAAC;;;;;;;IAMI,QAAQ;AACD,WADP,QAAQ,CACA,GAAG,EAAE;0BADb,QAAQ;;AAER,QAAI,CAAC,IAAI,GAAG,GAAG,CAAC;GACjB;;;;;;;;eAHC,QAAQ;;;;;;;WA6CP,iBAAG;AACN,UAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAChC,eAAO;AACL,cAAI,EAAE,QAAQ;AACd,aAAG,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAChC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI;AACzC,cAAI,EAAE,SAAS;SAChB,CAAC;OACH;AACD,UAAI,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACjC,YAAI,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/C,eAAO;AACL,cAAI,EAAE,SAAS;AACf,aAAG,EAAE,MAAM,CAAC,CAAC,CAAC;AACd,cAAI,EAAE,MAAM,CAAC,CAAC,CAAC;SAChB,CAAC;OACH;AACD,UAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC7B,eAAO;AACL,cAAI,EAAE,KAAK;AACX,aAAG,EAAE,IAAI,CAAC,IAAI;AACd,cAAI,EAAE,SAAS;SAChB,CAAC;OACH;KACF;;;WA5De,mBAAC,GAAG,EAAE;AAClB,UAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;AAC7D,UAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,aAAO,UAAU,IAAI,CAAC,UAAU,CAAC;KAClC;;;;;;;;;WAMS,eAAC,GAAG,EAAE;AACd,UAAI,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;AACrD,UAAI,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AAC3D,aAAO,MAAM,IAAI,CAAC,SAAS,CAAC;KAC7B;;;;;;;;;WAMY,kBAAC,GAAG,EAAE;AACjB,aAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACzD;;;;;;;;;;WAOc,oBAAC,GAAG,EAAE,KAAK,EAAE;AAC1B,aAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;KACjC;;;SAxCC,QAAQ;;;qBAwEC,QAAQ","file":"index.js","sourcesContent":["/** @type {Object} The definition for notations */\nvar notations = {\n  bracket: /^\\[([\\s\\S]+)\\][\\.]?([\\w\\S]+)*/,\n  dot: /\\.[^.]/,\n  spaces: /\\s/\n};\n/**\n * This class determines whether a\n * string is in phrase, bracket, or dot notation.\n * @class Notation\n */\nclass Notation {\n  constructor(str) {\n      this._key = str;\n    }\n    /**\n     * Determines whether a string is in bracket notation\n     * @param  {String}  str The string to determine.\n     * @return {Boolean}     Returns true if the string is in bracket notation.\n     */\n  static isBracket(str) {\n      let hasBracket = Notation.hasPattern(str, notations.bracket);\n      let hasEscaped = str.indexOf('[\\\\') > -1;\n      return hasBracket && !hasEscaped;\n    }\n    /**\n     * Determines whether a string is in dot notation\n     * @param  {String}  str The string to determine.\n     * @return {Boolean}     Returns true if the string is in dot notation.\n     */\n  static isDot(str) {\n      let hasDot = Notation.hasPattern(str, notations.dot);\n      let hasSpaces = Notation.hasPattern(str, notations.spaces);\n      return hasDot && !hasSpaces;\n    }\n    /**\n     * Determines whether a string is in dot notation\n     * @param  {String}  str The string to determine.\n     * @return {Boolean}     Returns true if the string is in dot notation.\n     */\n  static isPhrase(str) {\n      return !Notation.isBracket(str) && !Notation.isDot(str);\n    }\n    /**\n     * Determines whether a string contains the pattern.\n     * @param  {String}  str The string to determine.\n     * @return {Boolean}     Returns true if the string is in the pattern.\n     * @private\n     */\n  static hasPattern(str, regex) {\n      return str.search(regex) !== -1;\n    }\n    /**\n     * Returns the notation type based on the string.\n     * @return {Object} Returns the notation type.\n     */\n  parse() {\n    if (Notation.isPhrase(this._key)) {\n      return {\n        type: 'phrase',\n        key: this._key.indexOf('[\\\\') > -1 ?\n          this._key.replace('\\\\', '') : this._key,\n        seek: undefined\n      };\n    }\n    if (Notation.isBracket(this._key)) {\n      var result = notations.bracket.exec(this._key);\n      return {\n        type: 'bracket',\n        key: result[1],\n        seek: result[2]\n      };\n    }\n    if (Notation.isDot(this._key)) {\n      return {\n        type: 'dot',\n        key: this._key,\n        seek: undefined\n      };\n    }\n  }\n}\n\nexport default Notation;"],"sourceRoot":"/source/"}